{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "A sample template",
    "Parameters": {
      "KeyName": {
        "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
        "Type": "AWS::EC2::KeyPair::KeyName"
      },
      "Inst": {
        "Type": "String",
        "Default": "t2.micro",
        "AllowedValues": [
          "t2.micro",
          "t2.large"
        ]
      },
      "LatestAmiId": {
        "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
        "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
      }
    },
    "Resources": {
      "MyEC2Instance1": {
        "Type": "AWS::EC2::Instance",
        "Metadata": {
          "AWS::CloudFormation::Init": {
            "configSets": {
              "InstallAndRun": [
                "Install"
              ]
            },
            "Install": {
              "packages": {
                "yum": {
                  "httpd": [],
                  "php": [],
                  "docker": [],
                  "python3-pip": []
                }
              }
            }
          }
        },
        "Properties": {
          "ImageId": {
                      "Ref": "LatestAmiId"
                  },
          "InstanceType": {
            "Ref": "Inst"
          },
          "KeyName": {
            "Ref": "KeyName"
          },
          "SecurityGroups" : [{ "Ref" : "InstanceSecurityGroup" }],
           "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#!/bin/bash -xe\n",
                  "yum update -y aws-cfn-bootstrap || yum install -y aws-cfn-bootstrap\n",
                  "yum update -y \n",
                  "yum install -y gcc-c++ make\n",
                  "\n",
                  "# Install the files and packages from the metadata\n",
                  "/opt/aws/bin/cfn-init -v ",
                  "         --stack ",
                  {
                    "Ref": "AWS::StackName"
                  },
                  "         --resource MyEC2Instance1 ",
                  "         --configsets InstallAndRun ",
                  "         --region ",
                  {
                    "Ref": "AWS::Region"
                  },
                  "",
                  "\n",
                  "sudo usermod -a -G docker ec2-user\n",
                  "sudo service docker start\n",
                  "cp /etc/httpd/conf/httpd.conf /etc/httpd/conf/httpd.conf.bak\n",
                  "sed -i 's/AllowOverride None/AllowOverride ALL/g' /etc/httpd/conf/httpd.conf\n",
                  "docker pull si3mshady/vote\n",
                  "docker run --publish 3000:3000  si3mshady/vote\n",
                  "df -h\n",
                  "# Signal the status from cfn-init\n",
                  "",
                  "/opt/aws/bin/cfn-signal -e $? ",
                  "         --stack ",
                  {
                    "Ref": "AWS::StackName"
                  },
                  "         --resource MyEC2Instance1 ",
                  "         --region ",
                  {
                    "Ref": "AWS::Region"
                  },
                  "",
                  "",
                  ""
                ]
              ]
            }
          }
        }
      },
      "InstanceSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": "Enable SSH access via port 22",
          "SecurityGroupIngress": [
            {
              "IpProtocol": "tcp",
              "FromPort": "22",
              "ToPort": "22",
              "CidrIp": "0.0.0.0/0"
            },
            {
              "IpProtocol": "tcp",
              "FromPort": "80",
              "ToPort": "80",
              "CidrIp": "0.0.0.0/0"
            },
            {
              "IpProtocol": "tcp",
              "FromPort": "3000",
              "ToPort": "3000",
              "CidrIp": "0.0.0.0/0"
            }
          ]
        }
      }
    },
    "Outputs": {
      "MyEC2Instance1": {
        "Description": "InstanceId of the 1st instance created",
        "Value": {
          "Ref": "MyEC2Instance1"
        }
      },
      "InstanceSecurityGroup": {
        "Description": "Security group created",
        "Value": {
          "Ref": "InstanceSecurityGroup"
        }
      },
      "PublicIp": {
        "Description": "Public IP for instance1",
        "Value": {
          "Fn::GetAtt": [
            "MyEC2Instance1",
            "PublicIp"
          ]
        }
      }
    }
  }
  